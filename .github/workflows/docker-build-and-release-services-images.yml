name: Build and release services Images

on:
  push:
    branches:
      - main
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag version to be used for Docker image"
        required: true
        default: "v3.8.3"

env:
  PROJECT_ID: optimal-pursuit-410406
  REGION: asia-southeast1
  GAR_PREFIX: asia-southeast1-docker.pkg.dev/optimal-pursuit-410406/powtain

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - id: "auth"
        uses: "google-github-actions/auth@v2"
        with:
          credentials_json: "${{ secrets.SERVICE_ACCOUNT_KEY }}"

      - name: "Set up Cloud SDK"
        uses: "google-github-actions/setup-gcloud@v1"

      - name: "Use gcloud CLI"
        run: "gcloud info"

      - name: "Docker auth"
        run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev --quiet

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Extract metadata for Docker (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          tags: |
            type=ref,event=tag
            type=schedule
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern=v{{version}}
            # type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern=release-{{raw}}
            type=sha
            type=raw,value=${{ github.event.inputs.tag }}

      - name: Build and push Docker images
        run: |
          ROOT_DIR="build/images"
          for dir in "$ROOT_DIR"/*/; do
              # Find Dockerfile or *.dockerfile in a case-insensitive manner
              dockerfile=$(find "$dir" -maxdepth 1 -type f \( -iname 'dockerfile' -o -iname '*.dockerfile' \) | head -n 1)
              
              if [ -n "$dockerfile" ] && [ -f "$dockerfile" ]; then
                  IMAGE_NAME=$(basename "$dir")
                  echo "Building Docker image for $IMAGE_NAME with tags:"
                  
                  # Initialize tag arguments
                  tag_args=()

                  # Read each tag and append --tag arguments
                  while IFS= read -r tag; do
                      tag_args+=(--tag "$GAR_PREFIX/$IMAGE_NAME:$tag")
                  done <<< "${{ steps.meta.outputs.tags }}"
          
                  docker build $dir -f $dockerfile --tag "$GAR_PREFIX/$IMAGE_NAME:$tag"
                  docker push "$GAR_PREFIX/$IMAGE_NAME:$tag"
                  
                  # Build and push the Docker image with all tags
                  #docker buildx build --platform linux/amd64,linux/arm64 \
                  #  --file "$dockerfile" \
                  #  "${tag_args[@]}" \
                  #  --push "$dir"
              else
                  echo "No valid Dockerfile found in $dir"
              fi
          done
